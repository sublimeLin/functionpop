{"version":3,"file":"index.js","sources":["../src/helpers.js","../src/rows.js","../src/columns.js","../src/table.js","../src/config.js","../src/datatable.js"],"sourcesContent":["/**\n * Check is item is object\n * @return {Boolean}\n */\nexport const isObject = val => Object.prototype.toString.call(val) === \"[object Object]\"\n\n/**\n * Check for valid JSON string\n * @param  {String}   str\n * @return {Boolean|Array|Object}\n */\nexport const isJson = str => {\n    let t = !1\n    try {\n        t = JSON.parse(str)\n    } catch (e) {\n        return !1\n    }\n    return !(null === t || (!Array.isArray(t) && !isObject(t))) && t\n}\n\n/**\n * Create DOM element node\n * @param  {String}   nodeName nodeName\n * @param  {Object}   attrs properties and attributes\n * @return {Object}\n */\nexport const createElement = (nodeName, attrs) => {\n    const dom = document.createElement(nodeName)\n    if (attrs && \"object\" == typeof attrs) {\n        for (const attr in attrs) {\n            if (\"html\" === attr) {\n                dom.innerHTML = attrs[attr]\n            } else {\n                dom.setAttribute(attr, attrs[attr])\n            }\n        }\n    }\n    return dom\n}\n\nexport const flush = el => {\n    if (el instanceof NodeList) {\n        el.forEach(e => flush(e))\n    } else {\n        el.innerHTML = \"\"\n    }\n}\n\n/**\n * Create button helper\n * @param  {String}   class\n * @param  {Number}   page\n * @param  {String}   text\n * @return {Object}\n */\nexport const button = (className, page, text) => createElement(\n    \"li\",\n    {\n        class: className,\n        html: `<a href=\"#\" data-page=\"${page}\">${text}</a>`\n    }\n)\n\n/**\n * Bubble sort algorithm\n */\nexport const sortItems = (a, b) => {\n    let c\n    let d\n    if (1 === b) {\n        c = 0\n        d = a.length\n    } else {\n        if (b === -1) {\n            c = a.length - 1\n            d = -1\n        }\n    }\n    for (let e = !0; e;) {\n        e = !1\n        for (let f = c; f != d; f += b) {\n            if (a[f + b] && a[f].value > a[f + b].value) {\n                const g = a[f]\n                const h = a[f + b]\n                const i = g\n                a[f] = h\n                a[f + b] = i\n                e = !0\n            }\n        }\n    }\n    return a\n}\n\n/**\n * Pager truncation algorithm\n */\nexport const truncate = (a, b, c, d, ellipsis) => {\n    d = d || 2\n    let j\n    const e = 2 * d\n    let f = b - d\n    let g = b + d\n    const h = []\n    const i = []\n    if (b < 4 - d + e) {\n        g = 3 + e\n    } else if (b > c - (3 - d + e)) {\n        f = c - (2 + e)\n    }\n    for (let k = 1; k <= c; k++) {\n        if (1 == k || k == c || (k >= f && k <= g)) {\n            const l = a[k - 1]\n            l.classList.remove(\"active\")\n            h.push(l)\n        }\n    }\n    h.forEach(c => {\n        const d = c.children[0].getAttribute(\"data-page\")\n        if (j) {\n            const e = j.children[0].getAttribute(\"data-page\")\n            if (d - e == 2) i.push(a[e])\n            else if (d - e != 1) {\n                const f = createElement(\"li\", {\n                    class: \"ellipsis\",\n                    html: `<a href=\"#\">${ellipsis}</a>`\n                })\n                i.push(f)\n            }\n        }\n        i.push(c)\n        j = c\n    })\n\n    return i\n}\n","import {createElement} from \"./helpers\"\n/**\n * Rows API\n * @param {Object} instance DataTable instance\n * @param {Array} rows\n */\nexport class Rows {\n    constructor(dt, rows) {\n        this.dt = dt\n        this.rows = rows\n\n        return this\n    }\n\n    /**\n     * Build a new row\n     * @param  {Array} row\n     * @return {HTMLElement}\n     */\n    build(row) {\n        const tr = createElement(\"tr\")\n\n        let headings = this.dt.headings\n\n        if (!headings.length) {\n            headings = row.map(() => \"\")\n        }\n\n        headings.forEach((h, i) => {\n            const td = createElement(\"td\")\n\n            // Fixes #29\n            if (!row[i] || !row[i].length) {\n                row[i] = \"\"\n            }\n\n            td.innerHTML = row[i]\n\n            td.data = row[i]\n\n            tr.appendChild(td)\n        })\n\n        return tr\n    }\n\n    render(row) {\n        return row\n    }\n\n    /**\n     * Add new row\n     * @param {Array} select\n     */\n    add(data) {\n        if (Array.isArray(data)) {\n            const dt = this.dt\n            // Check for multiple rows\n            if (Array.isArray(data[0])) {\n                data.forEach(row => {\n                    dt.data.push(this.build(row))\n                })\n            } else {\n                dt.data.push(this.build(data))\n            }\n\n            // We may have added data to an empty table\n            if ( dt.data.length ) {\n                dt.hasRows = true\n            }\n\n\n            this.update()\n\n            dt.columns().rebuild()\n        }\n\n    }\n\n    /**\n     * Remove row(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        const dt = this.dt\n\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n\n            select.forEach(row => {\n                dt.data.splice(row, 1)\n            })\n        } else if (select == \"all\") {\n            dt.data = [];\n        } else {\n            dt.data.splice(select, 1)\n        }\n\n        // We may have emptied the table\n        if ( !dt.data.length ) {\n            dt.hasRows = false\n        }\n\n        this.update()\n        dt.columns().rebuild()\n    }\n\n    /**\n     * Update row indexes\n     * @return {Void}\n     */\n    update() {\n        this.dt.data.forEach((row, i) => {\n            row.dataIndex = i\n        })\n    }\n\n    /**\n     * Find index of row by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Number}\n     */\n    findRowIndex(columnIndex, value) {\n        // returns row index of first case-insensitive string match\n        // inside the td innerText at specific column index\n        return this.dt.data.findIndex(\n            tr => tr.children[columnIndex].innerText.toLowerCase().includes(String(value).toLowerCase())\n        )\n    }\n\n    /**\n     * Find index, row, and column data by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Object}\n     */\n    findRow(columnIndex, value) {\n        // get the row index\n        const index = this.findRowIndex(columnIndex, value)\n        // exit if not found\n        if (index < 0) {\n            return {\n                index: -1,\n                row: null,\n                cols: []\n            }\n        }\n        // get the row from data\n        const row = this.dt.data[index]\n        // return innerHTML of each td\n        const cols = [...row.cells].map(r => r.innerHTML)\n        // return everything\n        return {\n            index,\n            row,\n            cols\n        }\n    }\n\n    /**\n     * Update a row with new data\n     * @param  {Number} select\n     * @param  {Array} data\n     * @return {Void}\n     */\n    updateRow(select, data) {\n        const row = this.build(data)\n        this.dt.data.splice(select, 1, row)\n        this.update()\n        this.dt.columns().rebuild()\n    }\n}\n","import {sortItems} from \"./helpers\"\n\n/**\n * Columns API\n * @param {Object} instance DataTable instance\n * @param {Mixed} columns  Column index or array of column indexes\n */\nexport class Columns {\n    constructor(dt) {\n        this.dt = dt\n        return this\n    }\n\n    /**\n     * Swap two columns\n     * @return {Void}\n     */\n    swap(columns) {\n        if (columns.length && columns.length === 2) {\n            const cols = []\n\n            // Get the current column indexes\n            this.dt.headings.forEach((h, i) => {\n                cols.push(i)\n            })\n\n            const x = columns[0]\n            const y = columns[1]\n            const b = cols[y]\n            cols[y] = cols[x]\n            cols[x] = b\n\n            this.order(cols)\n        }\n    }\n\n    /**\n     * Reorder the columns\n     * @return {Array} columns  Array of ordered column indexes\n     */\n    order(columns) {\n        let a\n        let b\n        let c\n        let d\n        let h\n        let s\n        let cell\n\n        const temp = [\n            [],\n            [],\n            [],\n            []\n        ]\n\n        const dt = this.dt\n\n        // Order the headings\n        columns.forEach((column, x) => {\n            h = dt.headings[column]\n            s = h.getAttribute(\"data-sortable\") !== \"false\"\n            a = h.cloneNode(true)\n            a.originalCellIndex = x\n            a.sortable = s\n\n            temp[0].push(a)\n\n            if (!dt.hiddenColumns.includes(column)) {\n                b = h.cloneNode(true)\n                b.originalCellIndex = x\n                b.sortable = s\n\n                temp[1].push(b)\n            }\n        })\n\n        // Order the row cells\n        dt.data.forEach((row, i) => {\n            c = row.cloneNode(false)\n            d = row.cloneNode(false)\n\n            c.dataIndex = d.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                c.searchIndex = d.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            columns.forEach(column => {\n                cell = row.cells[column].cloneNode(true)\n                cell.data = row.cells[column].data\n                c.appendChild(cell)\n\n                if (!dt.hiddenColumns.includes(column)) {\n                    cell = row.cells[column].cloneNode(true)\n                    cell.data = row.cells[column].data\n                    d.appendChild(cell)\n                }\n            })\n\n            temp[2].push(c)\n            temp[3].push(d)\n        })\n\n        dt.headings = temp[0]\n        dt.activeHeadings = temp[1]\n\n        dt.data = temp[2]\n        dt.activeRows = temp[3]\n\n        // Update\n        dt.update()\n    }\n\n    /**\n     * Hide columns\n     * @return {Void}\n     */\n    hide(columns) {\n        if (columns.length) {\n            const dt = this.dt\n\n            columns.forEach(column => {\n                if (!dt.hiddenColumns.includes(column)) {\n                    dt.hiddenColumns.push(column)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Show columns\n     * @return {Void}\n     */\n    show(columns) {\n        if (columns.length) {\n            let index\n            const dt = this.dt\n\n            columns.forEach(column => {\n                index = dt.hiddenColumns.indexOf(column)\n                if (index > -1) {\n                    dt.hiddenColumns.splice(index, 1)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Check column(s) visibility\n     * @return {Boolean}\n     */\n    visible(columns) {\n        let cols\n        const dt = this.dt\n\n        columns = columns || dt.headings.map(th => th.originalCellIndex)\n\n        if (!isNaN(columns)) {\n            cols = !dt.hiddenColumns.includes(columns)\n        } else if (Array.isArray(columns)) {\n            cols = []\n            columns.forEach(column => {\n                cols.push(!dt.hiddenColumns.includes(column))\n            })\n        }\n\n        return cols\n    }\n\n    /**\n     * Add a new column\n     * @param {Object} data\n     */\n    add(data) {\n        let td\n        const th = document.createElement(\"th\")\n\n        if (!this.dt.headings.length) {\n            this.dt.insert({\n                headings: [data.heading],\n                data: data.data.map(i => [i])\n            })\n            this.rebuild()\n            return\n        }\n\n        if (!this.dt.hiddenHeader) {\n            if (data.heading.nodeName) {\n                th.appendChild(data.heading)\n            } else {\n                th.innerHTML = data.heading\n            }\n        } else {\n            th.innerHTML = \"\"\n        }\n\n        this.dt.headings.push(th)\n\n        this.dt.data.forEach((row, i) => {\n            if (data.data[i]) {\n                td = document.createElement(\"td\")\n\n                if (data.data[i].nodeName) {\n                    td.appendChild(data.data[i])\n                } else {\n                    td.innerHTML = data.data[i]\n                }\n\n                td.data = td.innerHTML\n\n                if (data.render) {\n                    td.innerHTML = data.render.call(this, td.data, td, row)\n                }\n\n                row.appendChild(td)\n            }\n        })\n\n        if (data.type) {\n            th.setAttribute(\"data-type\", data.type)\n        }\n        if (data.format) {\n            th.setAttribute(\"data-format\", data.format)\n        }\n\n        if (data.hasOwnProperty(\"sortable\")) {\n            th.sortable = data.sortable\n            th.setAttribute(\"data-sortable\", data.sortable === true ? \"true\" : \"false\")\n        }\n\n        this.rebuild()\n\n        this.dt.renderHeader()\n    }\n\n    /**\n     * Remove column(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n            select.forEach(column => this.remove(column))\n        } else {\n            this.dt.headings.splice(select, 1)\n\n            this.dt.data.forEach(row => {\n                row.removeChild(row.cells[select])\n            })\n        }\n\n        this.rebuild()\n    }\n\n    /**\n     * Filter by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @filter {array} filter - optional parameter with a list of strings\n     * @return {void}\n     */\n    filter(column, dir, init, terms) {\n        const dt = this.dt\n\n        // Creates a internal state that manages filters if there are none\n        if ( !dt.filterState ) {\n            dt.filterState = {\n                originalData: dt.data\n            }\n        }\n\n        // If that column is was not filtered yet, we need to create its state\n        if ( !dt.filterState[column] ) {\n\n            // append a filter that selects all rows, 'resetting' the filter\n            const filters = [...terms, () => true]\n\n            dt.filterState[column] = (\n                function() {\n                    let i = 0;\n                    return () => filters[i++ % (filters.length)]\n                }()\n            )\n        }\n\n        // Apply the filter and rebuild table\n        const rowFilter = dt.filterState[column]() // fetches next filter\n        const filteredRows = Array.from(dt.filterState.originalData).filter(tr => {\n            const cell = tr.cells[column]\n            const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n\n            // If the filter is a function, call it, if it is a string, compare it\n            return (typeof rowFilter) === \"function\" ? rowFilter(content) : content === rowFilter;\n        })\n\n        dt.data = filteredRows\n\n        if (!dt.data.length) {\n            dt.clear()\n            dt.hasRows = false\n            dt.setMessage(dt.options.labels.noRows)\n        } else {\n            this.rebuild()\n            dt.update()\n        }\n\n        if (!init) {\n            dt.emit(\"datatable.sort\", column, dir)\n        }\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @return {void}\n     */\n    sort(column, dir, init) {\n        const dt = this.dt\n\n        // Check column is present\n        if (dt.hasHeadings && (column < 0 || column > dt.headings.length)) {\n            return false\n        }\n\n        //If there is a filter for this column, apply it instead of sorting\n        const filterTerms = dt.options.filters &&\n              dt.options.filters[dt.headings[column].textContent]\n        if ( filterTerms && filterTerms.length !== 0 ) {\n            this.filter(column, dir, init, filterTerms)\n            return;\n        }\n\n        dt.sorting = true\n\n        if (!init) {\n            dt.emit(\"datatable.sorting\", column, dir)\n        }\n\n        let rows = dt.data\n        const alpha = []\n        const numeric = []\n        let a = 0\n        let n = 0\n        const th = dt.headings[column]\n\n        const waitFor = []\n\n        // Check for date format\n        if (th.getAttribute(\"data-type\") === \"date\") {\n            let format = false\n            const formatted = th.hasAttribute(\"data-format\")\n\n            if (formatted) {\n                format = th.getAttribute(\"data-format\")\n            }\n            waitFor.push(import(\"./date\").then(({parseDate}) => date => parseDate(date, format)))\n        }\n\n        Promise.all(waitFor).then(importedFunctions => {\n            const parseFunction = importedFunctions[0] // only defined if date\n            Array.from(rows).forEach(tr => {\n                const cell = tr.cells[column]\n                const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n                let num\n                if (parseFunction) {\n                    num = parseFunction(content)\n                } else if (typeof content===\"string\") {\n                    num = content.replace(/(\\$|,|\\s|%)/g, \"\")\n                } else {\n                    num = content\n                }\n\n                if (parseFloat(num) == num) {\n                    numeric[n++] = {\n                        value: Number(num),\n                        row: tr\n                    }\n                } else {\n                    alpha[a++] = {\n                        value: typeof content===\"string\" ? content.toLowerCase() : content,\n                        row: tr\n                    }\n                }\n            })\n\n            /* Sort according to direction (ascending or descending) */\n            if (!dir) {\n                if (th.classList.contains(\"asc\")) {\n                    dir = \"desc\"\n                } else {\n                    dir = \"asc\"\n                }\n            }\n            let top\n            let btm\n            if (dir == \"desc\") {\n                top = sortItems(alpha, -1)\n                btm = sortItems(numeric, -1)\n                th.classList.remove(\"asc\")\n                th.classList.add(\"desc\")\n            } else {\n                top = sortItems(numeric, 1)\n                btm = sortItems(alpha, 1)\n                th.classList.remove(\"desc\")\n                th.classList.add(\"asc\")\n            }\n\n            /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n            if (dt.lastTh && th != dt.lastTh) {\n                dt.lastTh.classList.remove(\"desc\")\n                dt.lastTh.classList.remove(\"asc\")\n            }\n\n            dt.lastTh = th\n\n            /* Reorder the table */\n            rows = top.concat(btm)\n\n            dt.data = []\n            const indexes = []\n\n            rows.forEach((v, i) => {\n                dt.data.push(v.row)\n\n                if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {\n                    indexes.push(i)\n                }\n            })\n\n            dt.searchData = indexes\n\n            this.rebuild()\n\n            dt.update()\n\n            if (!init) {\n                dt.emit(\"datatable.sort\", column, dir)\n            }\n        })\n    }\n\n    /**\n     * Rebuild the columns\n     * @return {Void}\n     */\n    rebuild() {\n        let a\n        let b\n        let c\n        let d\n        const dt = this.dt\n        const temp = []\n\n        dt.activeRows = []\n        dt.activeHeadings = []\n\n        dt.headings.forEach((th, i) => {\n            th.originalCellIndex = i\n            th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n            if (!dt.hiddenColumns.includes(i)) {\n                dt.activeHeadings.push(th)\n            }\n        })\n\n        // Loop over the rows and reorder the cells\n        dt.data.forEach((row, i) => {\n            a = row.cloneNode(false)\n            b = row.cloneNode(false)\n\n            a.dataIndex = b.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                a.searchIndex = b.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            Array.from(row.cells).forEach(cell => {\n                c = cell.cloneNode(true)\n                c.data = cell.data\n                a.appendChild(c)\n\n                if (!dt.hiddenColumns.includes(c.cellIndex)) {\n                    d = c.cloneNode(true)\n                    d.data = c.data\n                    b.appendChild(d)\n                }\n            })\n\n            // Append the fragment with the ordered cells\n            temp.push(a)\n            dt.activeRows.push(b)\n        })\n\n        dt.data = temp\n\n        dt.update()\n    }\n}\n","import {createElement} from \"./helpers\"\n\n/**\n * Parse data to HTML table\n */\nexport const dataToTable = function (data) {\n    let thead = false\n    let tbody = false\n\n    data = data || this.options.data\n\n    if (data.headings) {\n        thead = createElement(\"thead\")\n        const tr = createElement(\"tr\")\n        data.headings.forEach(col => {\n            const td = createElement(\"th\", {\n                html: col\n            })\n            tr.appendChild(td)\n        })\n\n        thead.appendChild(tr)\n    }\n\n    if (data.data && data.data.length) {\n        tbody = createElement(\"tbody\")\n        data.data.forEach(rows => {\n            if (data.headings) {\n                if (data.headings.length !== rows.length) {\n                    throw new Error(\n                        \"The number of rows do not match the number of headings.\"\n                    )\n                }\n            }\n            const tr = createElement(\"tr\")\n            rows.forEach(value => {\n                const td = createElement(\"td\", {\n                    html: value\n                })\n                tr.appendChild(td)\n            })\n            tbody.appendChild(tr)\n        })\n    }\n\n    if (thead) {\n        if (this.dom.tHead !== null) {\n            this.dom.removeChild(this.dom.tHead)\n        }\n        this.dom.appendChild(thead)\n    }\n\n    if (tbody) {\n        if (this.dom.tBodies.length) {\n            this.dom.removeChild(this.dom.tBodies[0])\n        }\n        this.dom.appendChild(tbody)\n    }\n}\n","/**\n * Default configuration\n * @typ {Object}\n */\nexport const defaultConfig = {\n    sortable: true,\n    searchable: true,\n\n    // Pagination\n    paging: true,\n    perPage: 10,\n    perPageSelect: [5, 10, 15, 20, 25],\n    nextPrev: true,\n    firstLast: false,\n    prevText: \"&lsaquo;\",\n    nextText: \"&rsaquo;\",\n    firstText: \"&laquo;\",\n    lastText: \"&raquo;\",\n    ellipsisText: \"&hellip;\",\n    ascText: \"▴\",\n    descText: \"▾\",\n    truncatePager: true,\n    pagerDelta: 2,\n\n    scrollY: \"\",\n\n    fixedColumns: true,\n    fixedHeight: false,\n\n    header: true,\n    hiddenHeader: false,\n    footer: false,\n\n    // Customise the display text\n    labels: {\n        placeholder: \"Search...\", // The search input placeholder\n        perPage: \"{select} entries per page\", // per-page dropdown label\n        noRows: \"No entries found\", // Message shown when there are no records to show\n        noResults: \"No results match your search query\", // Message shown when there are no search results\n        info: \"Showing {start} to {end} of {rows} entries\" //\n    },\n\n    // Customise the layout\n    layout: {\n        top: \"{select}{search}\",\n        bottom: \"{info}{pager}\"\n    }\n}\n","import {Rows} from \"./rows\"\nimport {Columns} from \"./columns\"\nimport {dataToTable} from \"./table\"\nimport {defaultConfig} from \"./config\"\nimport {\n    isObject,\n    isJson,\n    createElement,\n    flush,\n    button,\n    truncate\n} from \"./helpers\"\n\n\nexport class DataTable {\n    constructor(table, options = {}) {\n\n        const dom = typeof table === \"string\" ? document.querySelector(table) : table\n\n        // user options\n        this.options = {\n            ...defaultConfig,\n            ...options,\n            layout: {\n                ...defaultConfig.layout,\n                ...options.layout\n            },\n            labels: {\n                ...defaultConfig.labels,\n                ...options.labels\n            }\n        }\n\n        this.initialized = false\n\n        this.initialLayout = dom.innerHTML\n        this.initialSortable = this.options.sortable\n\n        // Disable manual sorting if no header is present (#4)\n        if (!this.options.header) {\n            this.options.sortable = false\n        }\n\n        if (dom.tHead === null) {\n            if (!this.options.data ||\n                (this.options.data && !this.options.data.headings)\n            ) {\n                this.options.sortable = false\n            }\n        }\n\n        if (dom.tBodies.length && !dom.tBodies[0].rows.length) {\n            if (this.options.data) {\n                if (!this.options.data.data) {\n                    throw new Error(\n                        \"You seem to be using the data option, but you've not defined any rows.\"\n                    )\n                }\n            }\n        }\n\n        this.dom = dom\n\n        this.table = this.dom // For compatibility. Remove in version 4\n\n        this.listeners = {\n            onResize: event => this.onResize(event)\n        }\n\n        this.init()\n    }\n\n    /**\n     * Add custom property or method to extend DataTable\n     * @param  {String} prop    - Method name or property\n     * @param  {Mixed} val      - Function or property value\n     * @return {Void}\n     */\n    static extend(prop, val) {\n        if (typeof val === \"function\") {\n            DataTable.prototype[prop] = val\n        } else {\n            DataTable[prop] = val\n        }\n    }\n\n    /**\n     * Initialize the instance\n     * @param  {Object} options\n     * @return {Void}\n     */\n    init(options) {\n        if (this.initialized || this.dom.classList.contains(\"dataTable-table\")) {\n            return false\n        }\n\n        Object.assign(this.options, options || {})\n\n        this.currentPage = 1\n        this.onFirstPage = true\n\n        this.hiddenColumns = []\n        this.columnRenderers = []\n        this.selectedColumns = []\n\n        this.render()\n\n        setTimeout(() => {\n            this.emit(\"datatable.init\")\n            this.initialized = true\n\n            if (this.options.plugins) {\n                Object.entries(this.options.plugins).forEach(([plugin, options]) => {\n                    if (this[plugin] && typeof this[plugin] === \"function\") {\n                        this[plugin] = this[plugin](options, {createElement})\n\n                        // Init plugin\n                        if (options.enabled && this[plugin].init && typeof this[plugin].init === \"function\") {\n                            this[plugin].init()\n                        }\n                    }\n                })\n            }\n        }, 10)\n    }\n\n    /**\n     * Render the instance\n     * @param  {String} type\n     * @return {Void}\n     */\n    render(type) {\n        if (type) {\n            switch (type) {\n            case \"page\":\n                this.renderPage()\n                break\n            case \"pager\":\n                this.renderPager()\n                break\n            case \"header\":\n                this.renderHeader()\n                break\n            }\n\n            return false\n        }\n\n        const options = this.options\n        let template = \"\"\n\n        // Convert data to HTML\n        if (options.data) {\n            dataToTable.call(this)\n        }\n\n        // Store references\n        this.body = this.dom.tBodies[0]\n        this.head = this.dom.tHead\n        this.foot = this.dom.tFoot\n\n        if (!this.body) {\n            this.body = createElement(\"tbody\")\n\n            this.dom.appendChild(this.body)\n        }\n\n        this.hasRows = this.body.rows.length > 0\n\n        // Make a tHead if there isn't one (fixes #8)\n        if (!this.head) {\n            const h = createElement(\"thead\")\n            const t = createElement(\"tr\")\n\n            if (this.hasRows) {\n                Array.from(this.body.rows[0].cells).forEach(() => {\n                    t.appendChild(createElement(\"th\"))\n                })\n\n                h.appendChild(t)\n            }\n\n            this.head = h\n\n            this.dom.insertBefore(this.head, this.body)\n\n            this.hiddenHeader = options.hiddenHeader\n        }\n\n        this.headings = []\n        this.hasHeadings = this.head.rows.length > 0\n\n        if (this.hasHeadings) {\n            this.header = this.head.rows[0]\n            this.headings = [].slice.call(this.header.cells)\n        }\n\n        // Header\n        if (!options.header) {\n            if (this.head) {\n                this.dom.removeChild(this.dom.tHead)\n            }\n        }\n\n        // Footer\n        if (options.footer) {\n            if (this.head && !this.foot) {\n                this.foot = createElement(\"tfoot\", {\n                    html: this.head.innerHTML\n                })\n                this.dom.appendChild(this.foot)\n            }\n        } else {\n            if (this.foot) {\n                this.dom.removeChild(this.dom.tFoot)\n            }\n        }\n\n        // Build\n        this.wrapper = createElement(\"div\", {\n            class: \"dataTable-wrapper dataTable-loading\"\n        })\n\n        // Template for custom layouts\n        template += \"<div class='dataTable-top'>\"\n        template += options.layout.top\n        template += \"</div>\"\n        if (options.scrollY.length) {\n            template += `<div class='dataTable-container' style='height: ${options.scrollY}; overflow-Y: auto;'></div>`\n        } else {\n            template += \"<div class='dataTable-container'></div>\"\n        }\n        template += \"<div class='dataTable-bottom'>\"\n        template += options.layout.bottom\n        template += \"</div>\"\n\n        // Info placement\n        template = template.replace(\"{info}\", options.paging ? \"<div class='dataTable-info'></div>\" : \"\")\n\n        // Per Page Select\n        if (options.paging && options.perPageSelect) {\n            let wrap = \"<div class='dataTable-dropdown'><label>\"\n            wrap += options.labels.perPage\n            wrap += \"</label></div>\"\n\n            // Create the select\n            const select = createElement(\"select\", {\n                class: \"dataTable-selector\"\n            })\n\n            // Create the options\n            options.perPageSelect.forEach(val => {\n                const selected = val === options.perPage\n                const option = new Option(val, val, selected, selected)\n                select.add(option)\n            })\n\n            // Custom label\n            wrap = wrap.replace(\"{select}\", select.outerHTML)\n\n            // Selector placement\n            template = template.replace(\"{select}\", wrap)\n        } else {\n            template = template.replace(\"{select}\", \"\")\n        }\n\n        // Searchable\n        if (options.searchable) {\n            const form =\n                `<div class='dataTable-search'><input class='dataTable-input' placeholder='${options.labels.placeholder}' type='text'></div>`\n\n            // Search input placement\n            template = template.replace(\"{search}\", form)\n        } else {\n            template = template.replace(\"{search}\", \"\")\n        }\n\n        if (this.hasHeadings) {\n            // Sortable\n            this.render(\"header\")\n        }\n\n        // Add table class\n        this.dom.classList.add(\"dataTable-table\")\n\n        // Paginator\n        const paginatorWrapper = createElement(\"nav\", {\n            class: \"dataTable-pagination\"\n        })\n        const paginator = createElement(\"ul\", {\n            class: \"dataTable-pagination-list\"\n        })\n        paginatorWrapper.appendChild(paginator)\n\n        // Pager(s) placement\n        template = template.replace(/\\{pager\\}/g, paginatorWrapper.outerHTML)\n        this.wrapper.innerHTML = template\n\n        this.container = this.wrapper.querySelector(\".dataTable-container\")\n\n        this.pagers = this.wrapper.querySelectorAll(\".dataTable-pagination-list\")\n\n        this.label = this.wrapper.querySelector(\".dataTable-info\")\n\n        // Insert in to DOM tree\n        this.dom.parentNode.replaceChild(this.wrapper, this.dom)\n        this.container.appendChild(this.dom)\n\n        // Store the table dimensions\n        this.rect = this.dom.getBoundingClientRect()\n\n        // Convert rows to array for processing\n        this.data = Array.from(this.body.rows)\n        this.activeRows = this.data.slice()\n        this.activeHeadings = this.headings.slice()\n\n        // Update\n        this.update()\n\n\n        this.setColumns()\n\n\n        // Fix height\n        this.fixHeight()\n\n        // Fix columns\n        this.fixColumns()\n\n        // Class names\n        if (!options.header) {\n            this.wrapper.classList.add(\"no-header\")\n        }\n\n        if (!options.footer) {\n            this.wrapper.classList.add(\"no-footer\")\n        }\n\n        if (options.sortable) {\n            this.wrapper.classList.add(\"sortable\")\n        }\n\n        if (options.searchable) {\n            this.wrapper.classList.add(\"searchable\")\n        }\n\n        if (options.fixedHeight) {\n            this.wrapper.classList.add(\"fixed-height\")\n        }\n\n        if (options.fixedColumns) {\n            this.wrapper.classList.add(\"fixed-columns\")\n        }\n\n        this.bindEvents()\n    }\n\n    /**\n     * Render the page\n     * @return {Void}\n     */\n    renderPage() {\n        if (this.hasHeadings) {\n            flush(this.header)\n\n            this.activeHeadings.forEach(th => this.header.appendChild(th))\n        }\n\n\n        if (this.hasRows && this.totalPages) {\n            if (this.currentPage > this.totalPages) {\n                this.currentPage = 1\n            }\n\n            // Use a fragment to limit touching the DOM\n            const index = this.currentPage - 1\n\n            const frag = document.createDocumentFragment()\n            this.pages[index].forEach(row => frag.appendChild(this.rows().render(row)))\n\n            this.clear(frag)\n\n            this.onFirstPage = this.currentPage === 1\n            this.onLastPage = this.currentPage === this.lastPage\n        } else {\n            this.setMessage(this.options.labels.noRows)\n        }\n\n        // Update the info\n        let current = 0\n\n        let f = 0\n        let t = 0\n        let items\n\n        if (this.totalPages) {\n            current = this.currentPage - 1\n            f = current * this.options.perPage\n            t = f + this.pages[current].length\n            f = f + 1\n            items = this.searching ? this.searchData.length : this.data.length\n        }\n\n        if (this.label && this.options.labels.info.length) {\n            // CUSTOM LABELS\n            const string = this.options.labels.info\n                .replace(\"{start}\", f)\n                .replace(\"{end}\", t)\n                .replace(\"{page}\", this.currentPage)\n                .replace(\"{pages}\", this.totalPages)\n                .replace(\"{rows}\", items)\n\n            this.label.innerHTML = items ? string : \"\"\n        }\n\n        if (this.currentPage == 1) {\n            this.fixHeight()\n        }\n    }\n\n    /**\n     * Render the pager(s)\n     * @return {Void}\n     */\n    renderPager() {\n        flush(this.pagers)\n\n        if (this.totalPages > 1) {\n            const c = \"pager\"\n            const frag = document.createDocumentFragment()\n            const prev = this.onFirstPage ? 1 : this.currentPage - 1\n            const next = this.onLastPage ? this.totalPages : this.currentPage + 1\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, 1, this.options.firstText))\n            }\n\n            // prev button\n            if (this.options.nextPrev && !this.onFirstPage) {\n                frag.appendChild(button(c, prev, this.options.prevText))\n            }\n\n            let pager = this.links\n\n            // truncate the links\n            if (this.options.truncatePager) {\n                pager = truncate(\n                    this.links,\n                    this.currentPage,\n                    this.pages.length,\n                    this.options.pagerDelta,\n                    this.options.ellipsisText\n                )\n            }\n\n            // active page link\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // append the links\n            pager.forEach(p => {\n                p.classList.remove(\"active\")\n                frag.appendChild(p)\n            })\n\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // next button\n            if (this.options.nextPrev && !this.onLastPage) {\n                frag.appendChild(button(c, next, this.options.nextText))\n            }\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, this.totalPages, this.options.lastText))\n            }\n\n            // We may have more than one pager\n            this.pagers.forEach(pager => {\n                pager.appendChild(frag.cloneNode(true))\n            })\n        }\n    }\n\n    /**\n     * Render the header\n     * @return {Void}\n     */\n    renderHeader() {\n        this.labels = []\n\n        if (this.headings && this.headings.length) {\n            this.headings.forEach((th, i) => {\n\n                this.labels[i] = th.textContent\n\n                if (th.firstElementChild && th.firstElementChild.classList.contains(\"dataTable-sorter\")) {\n                    th.innerHTML = th.firstElementChild.innerHTML\n                }\n\n                th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n\n                th.originalCellIndex = i\n                if (this.options.sortable && th.sortable) {\n                    const link = createElement(\"a\", {\n                        href: \"#\",\n                        class: \"dataTable-sorter\",\n                        html: th.innerHTML\n                    })\n\n                    th.innerHTML = \"\"\n                    th.setAttribute(\"data-sortable\", \"\")\n                    th.appendChild(link)\n                }\n            })\n        }\n\n        this.fixColumns()\n    }\n\n    /**\n     * Bind event listeners\n     * @return {[type]} [description]\n     */\n    bindEvents() {\n        const options = this.options\n        // Per page selector\n        if (options.perPageSelect) {\n            const selector = this.wrapper.querySelector(\".dataTable-selector\")\n            if (selector) {\n                // Change per page\n                selector.addEventListener(\"change\", () => {\n                    options.perPage = parseInt(selector.value, 10)\n                    this.update()\n\n                    this.fixHeight()\n\n                    this.emit(\"datatable.perpage\", options.perPage)\n                }, false)\n            }\n        }\n\n        // Search input\n        if (options.searchable) {\n            this.input = this.wrapper.querySelector(\".dataTable-input\")\n            if (this.input) {\n                this.input.addEventListener(\"keyup\", () => this.search(this.input.value), false)\n            }\n        }\n\n        // Pager(s) / sorting\n        this.wrapper.addEventListener(\"click\", e => {\n            const t = e.target.closest(\"a\")\n            if (t && (t.nodeName.toLowerCase() === \"a\")) {\n                if (t.hasAttribute(\"data-page\")) {\n                    this.page(t.getAttribute(\"data-page\"))\n                    e.preventDefault()\n                } else if (\n                    options.sortable &&\n                    t.classList.contains(\"dataTable-sorter\") &&\n                    t.parentNode.getAttribute(\"data-sortable\") != \"false\"\n                ) {\n                    this.columns().sort(this.headings.indexOf(t.parentNode))\n                    e.preventDefault()\n                }\n            }\n        }, false)\n\n        window.addEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * execute on resize\n     */\n    onResize() {\n        this.rect = this.container.getBoundingClientRect()\n        if (!this.rect.width) {\n            // No longer shown, likely no longer part of DOM. Give up.\n            return\n        }\n        this.fixColumns()\n    }\n\n    /**\n     * Set up columns\n     * @return {[type]} [description]\n     */\n    setColumns(ajax) {\n\n        if (!ajax) {\n            this.data.forEach(row => {\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n        }\n\n        // Check for the columns option\n        if (this.options.columns && this.headings.length) {\n\n            this.options.columns.forEach(data => {\n\n                // convert single column selection to array\n                if (!Array.isArray(data.select)) {\n                    data.select = [data.select]\n                }\n\n                if (data.hasOwnProperty(\"render\") && typeof data.render === \"function\") {\n                    this.selectedColumns = this.selectedColumns.concat(data.select)\n\n                    this.columnRenderers.push({\n                        columns: data.select,\n                        renderer: data.render\n                    })\n                }\n\n                // Add the data attributes to the th elements\n                data.select.forEach(column => {\n                    const th = this.headings[column]\n                    if (data.type) {\n                        th.setAttribute(\"data-type\", data.type)\n                    }\n                    if (data.format) {\n                        th.setAttribute(\"data-format\", data.format)\n                    }\n                    if (data.hasOwnProperty(\"sortable\")) {\n                        th.setAttribute(\"data-sortable\", data.sortable)\n                    }\n\n                    if (data.hasOwnProperty(\"hidden\")) {\n                        if (data.hidden !== false) {\n                            this.columns().hide([column])\n                        }\n                    }\n\n                    if (data.hasOwnProperty(\"sort\") && data.select.length === 1) {\n                        this.columns().sort(data.select[0], data.sort, true)\n                    }\n                })\n            })\n        }\n\n        if (this.hasRows) {\n            this.data.forEach((row, i) => {\n                row.dataIndex = i\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n\n            if (this.selectedColumns.length) {\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.selectedColumns.includes(i)) {\n                            this.columnRenderers.forEach(options => {\n                                if (options.columns.includes(i)) {\n                                    cell.innerHTML = options.renderer.call(this, cell.data, cell, row)\n                                }\n                            })\n                        }\n                    })\n                })\n            }\n\n            this.columns().rebuild()\n        }\n\n        this.render(\"header\")\n    }\n\n    /**\n     * Destroy the instance\n     * @return {void}\n     */\n    destroy() {\n        this.dom.innerHTML = this.initialLayout\n\n        // Remove the className\n        this.dom.classList.remove(\"dataTable-table\")\n\n        // Remove the containers\n        this.wrapper.parentNode.replaceChild(this.dom, this.wrapper)\n\n        this.initialized = false\n\n        window.removeEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * Update the instance\n     * @return {Void}\n     */\n    update() {\n        this.wrapper.classList.remove(\"dataTable-empty\")\n\n        this.paginate(this)\n        this.render(\"page\")\n\n        this.links = []\n\n        let i = this.pages.length\n        while (i--) {\n            const num = i + 1\n            this.links[i] = button(i === 0 ? \"active\" : \"\", num, num)\n        }\n\n        this.sorting = false\n\n        this.render(\"pager\")\n\n        this.rows().update()\n\n        this.emit(\"datatable.update\")\n    }\n\n    /**\n     * Sort rows into pages\n     * @return {Number}\n     */\n    paginate() {\n        const perPage = this.options.perPage\n        let rows = this.activeRows\n\n        if (this.searching) {\n            rows = []\n\n            this.searchData.forEach(index => rows.push(this.activeRows[index]))\n        }\n\n        if (this.options.paging) {\n            // Check for hidden columns\n            this.pages = rows\n                .map((tr, i) => i % perPage === 0 ? rows.slice(i, i + perPage) : null)\n                .filter(page => page)\n        } else {\n            this.pages = [rows]\n        }\n\n        this.totalPages = this.lastPage = this.pages.length\n\n        return this.totalPages\n    }\n\n    /**\n     * Fix column widths\n     * @return {Void}\n     */\n    fixColumns() {\n\n        if ((this.options.scrollY.length || this.options.fixedColumns) && this.activeHeadings && this.activeHeadings.length) {\n            let cells\n            let hd = false\n            this.columnWidths = []\n\n            // If we have headings we need only set the widths on them\n            // otherwise we need a temp header and the widths need applying to all cells\n            if (this.dom.tHead) {\n\n                if (this.options.scrollY.length) {\n                    hd = createElement(\"thead\")\n                    hd.appendChild(createElement(\"tr\"))\n                    hd.style.height = \"0px\"\n                    if (this.headerTable) {\n                        // move real header back into place\n                        this.dom.tHead = this.headerTable.tHead\n                    }\n                }\n\n                // Reset widths\n                this.activeHeadings.forEach(cell => {\n                    cell.style.width = \"\"\n                })\n\n                this.activeHeadings.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    cell.style.width = `${w}%`\n                    this.columnWidths[i] = ow\n                    if (this.options.scrollY.length) {\n                        const th = createElement(\"th\")\n                        hd.firstElementChild.appendChild(th)\n                        th.style.width = `${w}%`\n                        th.style.paddingTop = \"0\"\n                        th.style.paddingBottom = \"0\"\n                        th.style.border = \"0\"\n                    }\n                })\n\n                if (this.options.scrollY.length) {\n                    const container = this.dom.parentElement\n                    if (!this.headerTable) {\n                        this.headerTable = createElement(\"table\", {\n                            class: \"dataTable-table\"\n                        })\n                        const headercontainer = createElement(\"div\", {\n                            class: \"dataTable-headercontainer\"\n                        })\n                        headercontainer.appendChild(this.headerTable)\n                        container.parentElement.insertBefore(headercontainer, container)\n                    }\n                    const thd = this.dom.tHead\n                    this.dom.replaceChild(hd, thd)\n                    this.headerTable.tHead = thd\n\n                    // Compensate for scrollbars.\n                    this.headerTable.parentElement.style.paddingRight = `${\n                        this.headerTable.clientWidth -\n                        this.dom.clientWidth +\n                        parseInt(\n                            this.headerTable.parentElement.style.paddingRight ||\n                            \"0\",\n                            10\n                        )\n                    }px`\n\n                    if (container.scrollHeight > container.clientHeight) {\n                        // scrollbars on one page means scrollbars on all pages.\n                        container.style.overflowY = \"scroll\"\n                    }\n                }\n\n            } else {\n                cells = []\n\n                // Make temperary headings\n                hd = createElement(\"thead\")\n                const r = createElement(\"tr\")\n                Array.from(this.dom.tBodies[0].rows[0].cells).forEach(() => {\n                    const th = createElement(\"th\")\n                    r.appendChild(th)\n                    cells.push(th)\n                })\n\n                hd.appendChild(r)\n                this.dom.insertBefore(hd, this.body)\n\n                const widths = []\n                cells.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    widths.push(w)\n                    this.columnWidths[i] = ow\n                })\n\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.columns(cell.cellIndex).visible())\n                            cell.style.width = `${widths[i]}%`\n                    })\n                })\n\n                // Discard the temp header\n                this.dom.removeChild(hd)\n            }\n        }\n    }\n\n    /**\n     * Fix the container height\n     * @return {Void}\n     */\n    fixHeight() {\n        if (this.options.fixedHeight) {\n            this.container.style.height = null\n            this.rect = this.container.getBoundingClientRect()\n            this.container.style.height = `${this.rect.height}px`\n        }\n    }\n\n    /**\n     * Perform a search of the data set\n     * @param  {string} query\n     * @return {void}\n     */\n    search(query) {\n        if (!this.hasRows) return false\n\n        query = query.toLowerCase()\n\n        this.currentPage = 1\n        this.searching = true\n        this.searchData = []\n\n        if (!query.length) {\n            this.searching = false\n            this.update()\n            this.emit(\"datatable.search\", query, this.searchData)\n            this.wrapper.classList.remove(\"search-results\")\n            return false\n        }\n\n        this.clear()\n\n        this.data.forEach((row, idx) => {\n            const inArray = this.searchData.includes(row)\n\n            // https://github.com/Mobius1/Vanilla-DataTables/issues/12\n            const doesQueryMatch = query.split(\" \").reduce((bool, word) => {\n                let includes = false\n                let cell = null\n                let content = null\n\n                for (let x = 0; x < row.cells.length; x++) {\n                    cell = row.cells[x]\n                    content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.textContent\n\n                    if (\n                        content.toLowerCase().includes(word) &&\n                        this.columns(cell.cellIndex).visible()\n                    ) {\n                        includes = true\n                        break\n                    }\n                }\n\n                return bool && includes\n            }, true)\n\n            if (doesQueryMatch && !inArray) {\n                row.searchIndex = idx\n                this.searchData.push(idx)\n            } else {\n                row.searchIndex = null\n            }\n        })\n\n        this.wrapper.classList.add(\"search-results\")\n\n        if (!this.searchData.length) {\n            this.wrapper.classList.remove(\"search-results\")\n\n            this.setMessage(this.options.labels.noResults)\n        } else {\n            this.update()\n        }\n\n        this.emit(\"datatable.search\", query, this.searchData)\n    }\n\n    /**\n     * Change page\n     * @param  {int} page\n     * @return {void}\n     */\n    page(page) {\n        // We don't want to load the current page again.\n        if (page == this.currentPage) {\n            return false\n        }\n\n        if (!isNaN(page)) {\n            this.currentPage = parseInt(page, 10)\n        }\n\n        if (page > this.pages.length || page < 0) {\n            return false\n        }\n\n        this.render(\"page\")\n        this.render(\"pager\")\n\n        this.emit(\"datatable.page\", page)\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} direction - asc or desc\n     * @return {void}\n     */\n    sortColumn(column, direction) {\n        // Use columns API until sortColumn method is removed\n        this.columns().sort(column, direction)\n    }\n\n    /**\n     * Add new row data\n     * @param {object} data\n     */\n    insert(data) {\n        let rows = []\n        if (isObject(data)) {\n            if (data.headings) {\n                if (!this.hasHeadings && !this.hasRows) {\n                    const tr = createElement(\"tr\")\n                    data.headings.forEach(heading => {\n                        const th = createElement(\"th\", {\n                            html: heading\n                        })\n\n                        tr.appendChild(th)\n                    })\n                    this.head.appendChild(tr)\n\n                    this.header = tr\n                    this.headings = [].slice.call(tr.cells)\n                    this.hasHeadings = true\n\n                    // Re-enable sorting if it was disabled due\n                    // to missing header\n                    this.options.sortable = this.initialSortable\n\n                    // Allow sorting on new header\n                    this.render(\"header\")\n\n                    // Activate newly added headings\n                    this.activeHeadings = this.headings.slice()\n                }\n            }\n\n            if (data.data && Array.isArray(data.data)) {\n                rows = data.data\n            }\n        } else if (Array.isArray(data)) {\n            data.forEach(row => {\n                const r = []\n                Object.entries(row).forEach(([heading, cell]) => {\n\n                    const index = this.labels.indexOf(heading)\n\n                    if (index > -1) {\n                        r[index] = cell\n                    }\n                })\n                rows.push(r)\n            })\n        }\n\n        if (rows.length) {\n            this.rows().add(rows)\n\n            this.hasRows = true\n        }\n\n        this.update()\n        this.setColumns()\n        this.fixColumns()\n    }\n\n    /**\n     * Refresh the instance\n     * @return {void}\n     */\n    refresh() {\n        if (this.options.searchable) {\n            this.input.value = \"\"\n            this.searching = false\n        }\n        this.currentPage = 1\n        this.onFirstPage = true\n        this.update()\n\n        this.emit(\"datatable.refresh\")\n    }\n\n    /**\n     * Truncate the table\n     * @param  {mixes} html - HTML string or HTMLElement\n     * @return {void}\n     */\n    clear(html) {\n        if (this.body) {\n            flush(this.body)\n        }\n\n        let parent = this.body\n        if (!this.body) {\n            parent = this.dom\n        }\n\n        if (html) {\n            if (typeof html === \"string\") {\n                const frag = document.createDocumentFragment()\n                frag.innerHTML = html\n            }\n\n            parent.appendChild(html)\n        }\n    }\n\n    /**\n     * Export table to various formats (csv, txt or sql)\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    export(userOptions) {\n        if (!this.hasHeadings && !this.hasRows) return false\n\n        const headers = this.activeHeadings\n        let rows = []\n        const arr = []\n        let i\n        let x\n        let str\n        let link\n\n        const defaults = {\n            download: true,\n            skipColumn: [],\n\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\",\n\n            // sql\n            tableName: \"myTable\",\n\n            // json\n            replacer: null,\n            space: 4\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.type) {\n            if (options.type === \"txt\" || options.type === \"csv\") {\n                // Include headings\n                rows[0] = this.header\n            }\n\n            // Selection or whole table\n            if (options.selection) {\n                // Page number\n                if (!isNaN(options.selection)) {\n                    rows = rows.concat(this.pages[options.selection - 1])\n                } else if (Array.isArray(options.selection)) {\n                    // Array of page numbers\n                    for (i = 0; i < options.selection.length; i++) {\n                        rows = rows.concat(this.pages[options.selection[i] - 1])\n                    }\n                }\n            } else {\n                rows = rows.concat(this.activeRows)\n            }\n\n            // Only proceed if we have data\n            if (rows.length) {\n                if (options.type === \"txt\" || options.type === \"csv\") {\n                    str = \"\"\n\n                    for (i = 0; i < rows.length; i++) {\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                let text = rows[i].cells[x].textContent\n                                text = text.trim()\n                                text = text.replace(/\\s{2,}/g, \" \")\n                                text = text.replace(/\\n/g, \"  \")\n                                text = text.replace(/\"/g, \"\\\"\\\"\")\n                                //have to manually encode \"#\" as encodeURI leaves it as is.\n                                text = text.replace(/#/g, \"%23\")\n                                if (text.includes(\",\"))\n                                    text = `\"${text}\"`\n\n\n                                str += text + options.columnDelimiter\n                            }\n                        }\n                        // Remove trailing column delimiter\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // Apply line delimiter\n                        str += options.lineDelimiter\n                    }\n\n                    // Remove trailing line delimiter\n                    str = str.trim().substring(0, str.length - 1)\n\n                    if (options.download) {\n                        str = `data:text/csv;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"sql\") {\n                    // Begin INSERT statement\n                    str = `INSERT INTO \\`${options.tableName}\\` (`\n\n                    // Convert table headings to column names\n                    for (i = 0; i < headers.length; i++) {\n                        // Check for column skip and column visibility\n                        if (\n                            !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                            this.columns(headers[i].originalCellIndex).visible()\n                        ) {\n                            str += `\\`${headers[i].textContent}\\`,`\n                        }\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Begin VALUES\n                    str += \") VALUES \"\n\n                    // Iterate rows and convert cell data to column values\n                    for (i = 0; i < rows.length; i++) {\n                        str += \"(\"\n\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                str += `\"${rows[i].cells[x].textContent}\",`\n                            }\n                        }\n\n                        // Remove trailing comma\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // end VALUES\n                        str += \"),\"\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Add trailing colon\n                    str += \";\"\n\n                    if (options.download) {\n                        str = `data:application/sql;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"json\") {\n                    // Iterate rows\n                    for (x = 0; x < rows.length; x++) {\n                        arr[x] = arr[x] || {}\n                        // Iterate columns\n                        for (i = 0; i < headers.length; i++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                                this.columns(headers[i].originalCellIndex).visible()\n                            ) {\n                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent\n                            }\n                        }\n                    }\n\n                    // Convert the array of objects to JSON string\n                    str = JSON.stringify(arr, options.replacer, options.space)\n\n                    if (options.download) {\n                        str = `data:application/json;charset=utf-8,${str}`\n                    }\n                }\n\n                // Download\n                if (options.download) {\n                    // Filename\n                    options.filename = options.filename || \"datatable_export\"\n                    options.filename += `.${options.type}`\n\n                    str = encodeURI(str)\n\n                    // Create a link to trigger the download\n                    link = document.createElement(\"a\")\n                    link.href = str\n                    link.download = options.filename\n\n                    // Append the link\n                    document.body.appendChild(link)\n\n                    // Trigger the download\n                    link.click()\n\n                    // Remove the link\n                    document.body.removeChild(link)\n                }\n\n                return str\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Import data to the table\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    import(userOptions) {\n        let obj = false\n        const defaults = {\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\"\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.data.length || isObject(options.data)) {\n            // Import CSV\n            if (options.type === \"csv\") {\n                obj = {\n                    data: []\n                }\n\n                // Split the string into rows\n                const rows = options.data.split(options.lineDelimiter)\n\n                if (rows.length) {\n\n                    if (options.headings) {\n                        obj.headings = rows[0].split(options.columnDelimiter)\n\n                        rows.shift()\n                    }\n\n                    rows.forEach((row, i) => {\n                        obj.data[i] = []\n\n                        // Split the rows into values\n                        const values = row.split(options.columnDelimiter)\n\n                        if (values.length) {\n                            values.forEach(value => {\n                                obj.data[i].push(value)\n                            })\n                        }\n                    })\n                }\n            } else if (options.type === \"json\") {\n                const json = isJson(options.data)\n\n                // Valid JSON string\n                if (json) {\n                    obj = {\n                        headings: [],\n                        data: []\n                    }\n\n                    json.forEach((data, i) => {\n                        obj.data[i] = []\n                        Object.entries(data).forEach(([column, value]) => {\n                            if (!obj.headings.includes(column)) {\n                                obj.headings.push(column)\n                            }\n\n                            obj.data[i].push(value)\n                        })\n                    })\n                } else {\n                    // console.warn(\"That's not valid JSON!\")\n                }\n            }\n\n            if (isObject(options.data)) {\n                obj = options.data\n            }\n\n            if (obj) {\n                // Add the rows\n                this.insert(obj)\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Print the table\n     * @return {void}\n     */\n    print() {\n        const headings = this.activeHeadings\n        const rows = this.activeRows\n        const table = createElement(\"table\")\n        const thead = createElement(\"thead\")\n        const tbody = createElement(\"tbody\")\n\n        const tr = createElement(\"tr\")\n        headings.forEach(th => {\n            tr.appendChild(\n                createElement(\"th\", {\n                    html: th.textContent\n                })\n            )\n        })\n\n        thead.appendChild(tr)\n\n        rows.forEach(row => {\n            const tr = createElement(\"tr\")\n            Array.from(row.cells).forEach(cell => {\n                tr.appendChild(\n                    createElement(\"td\", {\n                        html: cell.textContent\n                    })\n                )\n            })\n            tbody.appendChild(tr)\n        })\n\n        table.appendChild(thead)\n        table.appendChild(tbody)\n\n        // Open new window\n        const w = window.open()\n\n        // Append the table to the body\n        w.document.body.appendChild(table)\n\n        // Print\n        w.print()\n    }\n\n    /**\n     * Show a message in the table\n     * @param {string} message\n     */\n    setMessage(message) {\n        let colspan = 1\n\n        if (this.hasRows) {\n            colspan = this.data[0].cells.length\n        } else if (this.activeHeadings.length) {\n            colspan = this.activeHeadings.length\n        }\n\n        this.wrapper.classList.add(\"dataTable-empty\")\n\n        if (this.label) {\n            this.label.innerHTML = \"\"\n        }\n        this.totalPages = 0\n        this.render(\"pager\")\n\n        this.clear(\n            createElement(\"tr\", {\n                html: `<td class=\"dataTables-empty\" colspan=\"${colspan}\">${message}</td>`\n            })\n        )\n    }\n\n    /**\n     * Columns API access\n     * @return {Object} new Columns instance\n     */\n    columns(columns) {\n        return new Columns(this, columns)\n    }\n\n    /**\n     * Rows API access\n     * @return {Object} new Rows instance\n     */\n    rows(rows) {\n        return new Rows(this, rows)\n    }\n\n    /**\n     * Add custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    on(event, callback) {\n        this.events = this.events || {}\n        this.events[event] = this.events[event] || []\n        this.events[event].push(callback)\n    }\n\n    /**\n     * Remove custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    off(event, callback) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        this.events[event].splice(this.events[event].indexOf(callback), 1)\n    }\n\n    /**\n     * Fire custom event\n     * @param  {String} event\n     * @return {Void}\n     */\n    emit(event) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        for (let i = 0; i < this.events[event].length; i++) {\n            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))\n        }\n    }\n}\n"],"names":["isObject","val","Object","prototype","toString","call","createElement","nodeName","attrs","dom","document","attr","innerHTML","setAttribute","flush","el","NodeList","forEach","e","button","className","page","text","class","html","sortItems","a","b","c","d","length","f","value","g","h","i","Rows","constructor","dt","rows","this","build","row","tr","headings","map","td","data","appendChild","render","add","Array","isArray","push","hasRows","update","columns","rebuild","remove","select","sort","splice","dataIndex","findRowIndex","columnIndex","findIndex","children","innerText","toLowerCase","includes","String","findRow","index","cols","cells","r","updateRow","Columns","swap","x","y","order","s","cell","temp","column","getAttribute","cloneNode","originalCellIndex","sortable","hiddenColumns","searchIndex","undefined","activeHeadings","activeRows","hide","show","indexOf","visible","th","isNaN","insert","heading","hiddenHeader","type","format","hasOwnProperty","renderHeader","removeChild","filter","dir","init","terms","filterState","originalData","filters","rowFilter","filteredRows","from","content","hasAttribute","clear","setMessage","options","labels","noRows","emit","hasHeadings","filterTerms","textContent","sorting","alpha","numeric","n","waitFor","Promise","then","parseDate","date","all","importedFunctions","parseFunction","top","btm","num","replace","parseFloat","Number","classList","contains","lastTh","concat","indexes","v","searchData","cellIndex","dataToTable","thead","tbody","col","Error","tHead","tBodies","defaultConfig","searchable","paging","perPage","perPageSelect","nextPrev","firstLast","prevText","nextText","firstText","lastText","ellipsisText","ascText","descText","truncatePager","pagerDelta","scrollY","fixedColumns","fixedHeight","header","footer","placeholder","noResults","info","layout","bottom","DataTable","table","querySelector","initialized","initialLayout","initialSortable","listeners","onResize","event","prop","assign","currentPage","onFirstPage","columnRenderers","selectedColumns","setTimeout","plugins","entries","plugin","enabled","renderPage","renderPager","template","body","head","foot","tFoot","t","insertBefore","slice","wrapper","wrap","selected","option","Option","outerHTML","form","paginatorWrapper","paginator","container","pagers","querySelectorAll","label","parentNode","replaceChild","rect","getBoundingClientRect","setColumns","fixHeight","fixColumns","bindEvents","totalPages","frag","createDocumentFragment","pages","onLastPage","lastPage","items","current","searching","string","prev","next","pager","links","ellipsis","j","k","l","truncate","p","firstElementChild","link","href","selector","addEventListener","parseInt","input","search","target","closest","preventDefault","window","width","ajax","renderer","hidden","destroy","removeEventListener","paginate","hd","columnWidths","style","height","headerTable","ow","offsetWidth","w","paddingTop","paddingBottom","border","parentElement","headercontainer","thd","paddingRight","clientWidth","scrollHeight","clientHeight","overflowY","widths","query","idx","inArray","split","reduce","bool","word","sortColumn","direction","refresh","parent","export","userOptions","headers","arr","str","download","skipColumn","lineDelimiter","columnDelimiter","tableName","replacer","space","selection","trim","substring","JSON","stringify","filename","encodeURI","click","import","obj","shift","values","json","parse","isJson","print","open","message","colspan","on","callback","events","off","apply","arguments"],"mappings":"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"}